Simple Search Script

    <script>
        document.getElementById('search-input').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const tableRows = document.querySelectorAll('#menu-table-body tr');

            tableRows.forEach(row => {
                // Get the text from the columns that we want to search (Name, Category, Description)
                const name = row.cells[1].textContent.toLowerCase();
                const category = row.cells[2].textContent.toLowerCase();
                const price = row.cells[3].textContent.toLowerCase();
                const description = row.cells[4].textContent.toLowerCase();

                // Check if the search term is in any of those fields
                if (name.includes(searchTerm) || category.includes(searchTerm) || description.includes(
                        searchTerm) || price.includes(searchTerm)) {
                    row.style.display = ''; // Show the row
                } else {
                    row.style.display = 'none'; // Hide the row
                }
            });
        });
    </script>




--------------------------------------------------------------------------------------------------------------------------




Advanced Separate Table Search Script

 {{-- Display Search Results --}}
            {{-- <div id="search-results">
                @include('admin.tables.menu_table', ['menus' => $menus])
            </div> --}}

  <script>
        let debounceTimer;

        function debounce(func, delay) {
            return function(...args) {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => func.apply(this, args), delay);
            };
        }

        function performSearch(query) {
            fetch(`{{ route('admin.menuSearch') }}?query=${query}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                    }
                })
                .then(response => response.text())
                .then(html => {
                    document.getElementById('search-results').innerHTML = html;
                });
        }

        document.getElementById('search-input').addEventListener('input', debounce(function() {
            let query = this.value.trim();
            if (query.length > 0) {
                performSearch(query);
            } else {
                fetch(`{{ route('admin.menuSearch') }}?query=`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                        }
                    })
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('search-results').innerHTML = html;
                    });
            }
        }, 500));

        document.addEventListener('click', function(e) {
            if (e.target.closest('.pagination a')) {
                e.preventDefault();
                let page = e.target.getAttribute('href').split('page=')[1];
                let query = document.getElementById('search-input').value.trim();
                fetch(`{{ route('admin.menuSearch') }}?query=${query}&page=${page}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                        }
                    })
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('search-results').innerHTML = html;
                    });
            }
        });
    </script>



--------------------------------------------------------------------------------------------------------------------------


Pagination
<nav aria-label="Pagination">
    <ul class="pagination justify-content-end mb-1">
        {{-- Previous Page Link --}}
        @if ($menus->onFirstPage())
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        @else
            <li class="page-item">
                <a class="page-link custom-pagination-link" href="{{ $menus->previousPageUrl() }}">Previous</a>
            </li>
        @endif

        {{-- Pagination Links --}}
        @foreach ($menus->links()->elements[0] as $page => $url)
            <li class="page-item {{ $page == $menus->currentPage() ? 'active custom-active' : '' }}">
                <a class="page-link custom-pagination-link" href="{{ $url }}">{{ $page }}</a>
            </li>
        @endforeach

        {{-- Next Page Link --}}
        @if ($menus->hasMorePages())
            <li class="page-item">
                <a class="page-link custom-pagination-link" href="{{ $menus->nextPageUrl() }}">Next</a>
            </li>
        @else
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
        @endif
    </ul>
</nav>



--------------------------------------------------------------------------------------------------------------------------





   {{-- <div class="icon-overlay">
        <!-- Add to Cart -->
        <a href="{{ route('user.addToCart', ['menuId' => $menu->id]) }}"
        class="nav-icon add-to-cart" data-menu-id="{{ $menu->id }}"
        title="Add to Cart">
        <i class="fa-solid fa-cart-plus"></i>
        </a>

        <!-- Share (You can add a share link here, maybe a modal or link to a share page) -->
        <a href="#" class="nav-icon" title="Share">
        <i class="fa-solid fa-share"></i>
        </a>

        <!-- View Details (Link to the menu's details) -->
        <a href="{{ route('user.menuDetail', ['menuId' => $menu->id]) }}">
        <i class="fa-solid fa-search"></i>
        </a>

        <!-- Add to Favorites -->
        <a href="{{ route('user.addToFavorites', ['menuId' => $menu->id]) }}"
        class="nav-icon" title="Add to Favorites">
        <i class="fa-solid fa-heart"></i>
        </a>
    </div> --}}






--------------------------------------------------------------------------------------------------------------------------




public function menu(Request $request)
    {
        $categories = Menu::select('category', DB::raw('count(*) as menu_count'))
            ->groupBy('category')
            ->get();

        $selectedCategory = $request->input('category', 'All Menus');

        $user = Auth::user();
        $userCart = $user->cart;

        // Retrieve menus based on selected category, excluding items currently in the cart
        $cartMenuIds = $user->cartItems->pluck('menu_id');

        if ($selectedCategory == 'All Menus') {
            $menus = Menu::whereNotIn('id', $cartMenuIds)->get();
        } else {
            $menus = Menu::where('category', $selectedCategory)
                ->whereNotIn('id', $cartMenuIds)
                ->get();
        }

        return view('user.menu', compact('menus', 'categories', 'selectedCategory', 'userCart'));
    }



    public function addToCart(Request $request, $menuId)
    {
        /** @var User $user */
        $user = Auth::user();

        // Check if the menu item is already in the user's cart
        if (!$user->cartItems()->where('menu_id', $menuId)->exists()) {
            // Attach the menu item to the user's cart
            $user->cartItems()->attach($menuId);
        }

        // Increment the cart count
        $user->increment('cart');

        return redirect()->back()->with('success', 'Item added to cart!');
    }

    public function shoppingCart()
    {
        // Get the logged-in user
        /** @var User $user */
        $user = Auth::user();

        // Retrieve only the menu items the user added to their cart
        $menus = Menu::whereIn('id', function ($query) use ($user) {
            $query->select('menu_id')
                ->from('cart_items')
                ->where('user_id', $user->id);
        })->get();

        // Pass the filtered menus to the view
        return view('user.shoppingCart', compact('user', 'menus'));
    }


    public function removeCart($menuId)
    {
        /** @var User $user */
        $user = Auth::user();

        // Check if the cart item exists for the current user and specified menu_id
        $cartItem = DB::table('cart_items')
            ->where('user_id', $user->id)
            ->where('menu_id', $menuId)
            ->first();

        if ($cartItem) {
            // Delete the cart item for this user and menu_id
            DB::table('cart_items')
                ->where('user_id', $user->id)
                ->where('menu_id', $menuId)
                ->delete();

            // Decrement the user's cart count
            $user->decrement('cart');

            return redirect()->route('user.shoppingCart')->with('success', 'Item removed from cart!');
        }

        return redirect()->route('user.shoppingCart')->with('error', 'Item not found in cart.');
    }






--------------------------------------------------------------------------------------------------------------------------







       {{-- Right --}}
            <div class="right d-flex flex-column py-5 ps-5">

                <div class="products border-bottom pb-4 mb-4">
                    <div class="mb-3">Product(s):</div>
                    <div class="d-flex gap-3 justify-content-between">
                        <div class="picture border border-3">
                            <img src="{{ asset('images/logo.jpg') }}" class="image-fluid" width="70" height=""
                                alt="Picture">
                        </div>
                        <div class="menu-name d-flex flex-column">
                            <div class="name">Smart Home Speaker</div>
                            <div class="size">(Color: Black, Size: S)</div>
                        </div>
                        <div class="price">430</div>
                    </div>
                </div>

                <div class="cart-totals d-flex flex-column border-bottom pb-4 gap-3">
                    <div class="d-flex justify-content-between">
                        <div class="">Subtotal:</div>
                        <div class="fw-bold">862</div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="">Subtotal:</div>
                        <div class="fw-bold">862</div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="">Subtotal:</div>
                        <div class="fw-bold">862</div>
                    </div>
                    <div class="d-flex justify-content-between fw-bold">
                        <div class="">Total:</div>
                        <div class="fs-4">862</div>
                    </div>
                </div>
            </div>


            // Shopping Cart Plus Minus Quantity
function incrementQuantity(button) {
    let input = button.previousElementSibling;
    input.value = parseInt(input.value) + 1;
    updateCartTotals();
}

function decrementQuantity(button) {
    let input = button.nextElementSibling;
    if (parseInt(input.value) > 1) {
        input.value = parseInt(input.value) - 1;
        updateCartTotals();
    }
}

function updateCartTotals() {
    let rows = document.querySelectorAll('.menu-row');
    let totalPrice = 0;

    rows.forEach(row => {
        let price = parseFloat(row.dataset.price); // Get original price from data attribute
        let quantity = parseInt(row.querySelector('.quantity-input').value); // Get updated quantity
        let itemTotal = price * quantity; // Calculate item total

        // Update the quantity in Cart Totals display
        let cartItem = document.querySelector(`.cart-item-${row.dataset.menuId}`);
        cartItem.querySelector('.cart-item-quantity').textContent = quantity > 1 ? `(${quantity})` : ''; // Show quantity if more than 1
        cartItem.querySelector('.cart-item-total').textContent = formatPrice(itemTotal);

        totalPrice += itemTotal; // Add to total price
    });

    document.querySelector('#total-price').textContent = formatPrice(totalPrice); // Update total price
}

// Helper function to format price
function formatPrice(price) {
    return price % 1 === 0 ? `₱${price}` : `₱${price.toFixed(2)}`;
}








--------------------------------------------------------------------------------------------------------------------------



 {{-- Top Categories --}}
        <div class="text-center mb-5">
            <h2>Top Categories</h2>
            <p class="w-75 mx-auto text-muted">
                Explore the top categories our customers love, featuring a variety of dishes that keep them coming back for
                more.
            </p>

            <div class="container text-center mt-4">
                <div class="row row-cols-2 row-cols-sm-3 row-cols-md-5 g-4">
                    @foreach ($topCategories as $category)
                        <div class="col d-flex flex-column align-items-center">
                            <div class="position-relative">
                                <img src="{{ asset('images/' . $category->image) }}"
                                    class="img-fluid rounded-circle shadow-sm mb-2"
                                    style="width: 100px; height: 100px; object-fit: cover;" alt="{{ $category->name }}">
                            </div>
                            <div class="fw-bold">{{ $category->name }}</div>
                            <small class="text-muted">{{ $category->menus_count }} Menus</small>
                        </div>
                    @endforeach
                </div>
            </div>
        </div>



        